import { BridgeTxn } from '../bridge';
// import { ENV } from '../utils/dotenv'; // not sure if we can initialize DB without ENV
import { db } from './db';
import { exampleBridgeTxn } from '../test/test-helper/test-example';
import { EXAMPLE_TXN_FOR_CREATE_TEST } from '../test/test-helper/test-examples';
import { BridgeTxnStatusEnum } from '../common/type/txn';

describe('DATABASE test', () => {
  describe('CRUD test with Bridge Txn', () => {
    it('create a transaction', async () => {
      // should test with bridgeTxn
      EXAMPLE_TXN_FOR_CREATE_TEST.txnComment = 'generated by db.spec.ts';
      const res = await db.createTxn(EXAMPLE_TXN_FOR_CREATE_TEST);
      EXAMPLE_TXN_FOR_CREATE_TEST.txnComment = null;
      expect(typeof res).toBe('number');
    });
    it.skip('read a transaction', async () => {
      // skip: serialize bigint
      // should test with bridgeTxn
      exampleBridgeTxn.dbId = exampleBridgeTxn.getDbId();
      const res = await db.readTxn(exampleBridgeTxn.dbId);
      expect(typeof res).toBe('object');

      expect(BridgeTxn.fromDbItem(res)).toEqual(exampleBridgeTxn);
    });
    it.skip('update a transaction', async () => {
      exampleBridgeTxn.txnStatus = BridgeTxnStatusEnum.DONE_OUTGOING;
      exampleBridgeTxn.toTxnId = 'some_fake_txn_id';
      const res1 = await db.updateTxn(exampleBridgeTxn);
      expect(typeof res1).toBe('number');

      // read the updated transaction
      // should test with bridgeTxn
      exampleBridgeTxn.dbId = exampleBridgeTxn.getDbId();
      const res2 = await db.readTxn(exampleBridgeTxn.dbId);
      expect(typeof res2).toBe('object');
      // verify updated transaction is correct
      expect(BridgeTxn.fromDbItem(res2)).toEqual(exampleBridgeTxn);
    });
  });
  it('should read all txn in table', async () => {
    const res = await db.readAllTxn();
    expect(typeof res).toBe('object');
    expect(Array.isArray(res)).toBe(true);
    console.log(res);
    // expect(res.length).toBeGreaterThan(0);
  });
});
